// <auto-generated />
using System;
using Assignment.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment.Migrations
{
    [DbContext(typeof(AssDbContext))]
    [Migration("20230408101700_Ass")]
    partial class Ass
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Assignment.Models.Bill_Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("Nvarchar(1000)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("Datetime");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("Nvarchar(100)");

                    b.Property<decimal>("Payment")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("Varchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bill", (string)null);
                });

            modelBuilder.Entity("Assignment.Models.BillDetail_Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,0)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ProductId");

                    b.ToTable("BillDetail", (string)null);
                });

            modelBuilder.Entity("Assignment.Models.Cart_Model", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("Assignment.Models.CartDetail_Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("CartDetail", (string)null);
                });

            modelBuilder.Entity("Assignment.Models.Category_Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Assignment.Models.Product_Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("CateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkImg")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Page")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("dec(20,0)");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<int>("YearOfPublication")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CateId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Assignment.Models.Role_Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Assignment.Models.User_Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Assignment.Models.Bill_Model", b =>
                {
                    b.HasOne("Assignment.Models.User_Model", "User_Model")
                        .WithMany("Bill_Models")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Bill_User");

                    b.Navigation("User_Model");
                });

            modelBuilder.Entity("Assignment.Models.BillDetail_Model", b =>
                {
                    b.HasOne("Assignment.Models.Bill_Model", "Bill_Model")
                        .WithMany("BillDetail_Models")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Models.Product_Model", "Product_Model")
                        .WithMany("BillDetail_Models")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill_Model");

                    b.Navigation("Product_Model");
                });

            modelBuilder.Entity("Assignment.Models.Cart_Model", b =>
                {
                    b.HasOne("Assignment.Models.User_Model", "User_Model")
                        .WithOne("Cart_Model")
                        .HasForeignKey("Assignment.Models.Cart_Model", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User_Model");
                });

            modelBuilder.Entity("Assignment.Models.CartDetail_Model", b =>
                {
                    b.HasOne("Assignment.Models.Product_Model", "Product_Model")
                        .WithMany("CartDetail_Models")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Models.Cart_Model", "Cart_Model")
                        .WithMany("CartDetail_Models")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart_Model");

                    b.Navigation("Product_Model");
                });

            modelBuilder.Entity("Assignment.Models.Product_Model", b =>
                {
                    b.HasOne("Assignment.Models.Category_Model", "Category_Model")
                        .WithMany("Product_Models")
                        .HasForeignKey("CateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category_Model");
                });

            modelBuilder.Entity("Assignment.Models.User_Model", b =>
                {
                    b.HasOne("Assignment.Models.Role_Model", "Role_Model")
                        .WithMany("User_Models")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role_Model");
                });

            modelBuilder.Entity("Assignment.Models.Bill_Model", b =>
                {
                    b.Navigation("BillDetail_Models");
                });

            modelBuilder.Entity("Assignment.Models.Cart_Model", b =>
                {
                    b.Navigation("CartDetail_Models");
                });

            modelBuilder.Entity("Assignment.Models.Category_Model", b =>
                {
                    b.Navigation("Product_Models");
                });

            modelBuilder.Entity("Assignment.Models.Product_Model", b =>
                {
                    b.Navigation("BillDetail_Models");

                    b.Navigation("CartDetail_Models");
                });

            modelBuilder.Entity("Assignment.Models.Role_Model", b =>
                {
                    b.Navigation("User_Models");
                });

            modelBuilder.Entity("Assignment.Models.User_Model", b =>
                {
                    b.Navigation("Bill_Models");

                    b.Navigation("Cart_Model")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
